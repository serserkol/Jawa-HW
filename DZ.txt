// Описать структуру входных и выходных данных для задачи про "Волка, козу и капусту" на Java. Что должно прийти на вход и что может быть результатом функции shipping()? Необходимо передать данные, которые позволяют алгоритму понять, какой состав животных и продуктов предстоит перевезти и кто или что из них является пищей для других. Писать алгоритм не нужно. В качестве результата нужно определить структуру данных, которая позволит перевозчику понять, кого в какой момент нужно перевозить.//

Входные данные для функции shipping() могут быть представлены в виде списка объектов, где каждый объект содержит информацию о животном или продукте. Каждый объект может иметь следующие свойства:

class Item {
    String name; // имя элемента (волк, коза, капуста)
    List<String> foodFor; // список элементов, которые могут съесть этот элемент
}

Таким образом, входные данные могут выглядеть следующим образом:

List<Item> items = Arrays.asList(
    new Item("волк", Arrays.asList("коза")),
    new Item("коза", Arrays.asList("капуста")),
    new Item("капуста", new ArrayList<>())
);

Выходные данные могут быть представлены в виде списка действий, которые необходимо выполнить для успешной доставки всех элементов. Каждое действие может быть представлено в виде строки, описывающей, что именно нужно перевезти:

class Action {
    String description; // описание действия
}
Таким образом, результат функции shipping() может выглядеть следующим образом:
List<Action> actions = shipping(items);
// actions может содержать следующие действия:
// "Перевезти козу на другой берег"
// "Вернуться обратно"
// "Перевезти волка на другой берег"
// "Привезти козу обратно"
// "Перевезти капусту на другой берег"
// "Вернуться обратно"
// "Перевезти козу на другой берег"

Это позволит перевозчику понять, кого и в какой момент нужно перевозить. Пожалуйста, обратите внимание, что это только пример структуры данных и она может быть адаптирована в зависимости от конкретных требований и условий задачи.



// Написать алгоритм в виде блок-схемы или псевдокода следующей программы:
На вход в переменные x, y, z поступают 3 целых числа. Найти из них максимальное значение.

1. Начало
2. Вводим числа x, y, z
3. Пусть max = x
4. Если y > max, то max = y
5. Если z > max, то max = z
6. Выводим max
7. Конец


// Написать алгоритм в виде блок-схемы следующей программы:
На вход в переменные x, y, z поступают 3 целых числа. Определить, есть ли среди них хотя бы 2 одинаковых.

1. Начало
2. Вводим числа x, y, z
3. Если x == y или x == z или y == z, то
4.     Выводим "Есть хотя бы два одинаковых числа"
5. Иначе
6.     Выводим "Все числа различны"
7. Конец



